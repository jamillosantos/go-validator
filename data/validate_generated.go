// Code generated by validator-gen. DO NOT EDIT.
// See https://github.com/jamillosantos/go-validator for details.
package data
import (
	"github.com/jamillosantos/go-validator"
)

func (v *RequiredValidation) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if !(func () bool {
	return v.Name != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "name", v.Name))
	}


	if !(func () bool {
	if v.NamePointer == nil {
		return false
	}
	return *v.NamePointer != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "name_ptr", v.NamePointer))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}


func (v *EmailValidation) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if !(func () bool {
		if v.Email == "" {
		return true
	}

	return validator.EmailRegex.MatchString(v.Email)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrEmail, "email", "email", v.Email))
	}


	if !(func () bool {
		if v.EmailPointer == nil || *v.EmailPointer == "" {
		return true
	}

	return validator.EmailRegex.MatchString(*v.EmailPointer)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrEmail, "email", "EmailPointer", v.EmailPointer))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}


func (v *MinValidation) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if !(func () bool {
	return len(v.Name) == 0 || len(v.Name) >= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMin, "min", "name", v.Name))
	}


	if !(func () bool {
	if v.NamePtr == nil || *v.NamePtr == "" {
		return true
	}
	return len(*v.NamePtr) == 0 || len(*v.NamePtr) >= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMin, "min", "name_ptr", v.NamePtr))
	}


	if !(func () bool {
	return len(v.Names) == 0 || len(v.Names) >= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMin, "min", "names", v.Names))
	}


	if !(func () bool {
	if v.Age == 0 {
		return true
	}
	return v.Age >= 35
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMin, "min", "age", v.Age))
	}


	if !(func () bool {
	if v.AgePointer == nil || *v.AgePointer == 0 {
		return true
	}
	return *v.AgePointer >= 35
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMin, "min", "age_ptr", v.AgePointer))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}


func (v *MaxValidation) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if !(func () bool {
	return len(v.Name) == 0 || len(v.Name) <= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMax, "max", "name", v.Name))
	}


	if !(func () bool {
	if v.NamePtr == nil || *v.NamePtr == "" {
		return true
	}
	return len(*v.NamePtr) == 0 || len(*v.NamePtr) <= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMax, "max", "name_ptr", v.NamePtr))
	}


	if !(func () bool {
	return len(v.Names) == 0 || len(v.Names) <= 3
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMax, "max", "names", v.Names))
	}


	if !(func () bool {
	if v.Age == 0 {
		return true
	}
	return v.Age <= 35
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMax, "max", "age", v.Age))
	}


	if !(func () bool {
	if v.AgePointer == nil || *v.AgePointer == 0 {
		return true
	}
	return *v.AgePointer <= 35
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrMax, "max", "age_ptr", v.AgePointer))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}


func (v *User) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if (func () bool {
	if v.Age == 0 {
		return true
	}
	return v.Age >= 0
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "gte", "age", v.Age))
	}


	if (func () bool {
	if v.Age == 0 {
		return true
	}
	return v.Age <= 130
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "lte", "age", v.Age))
	}


	if !(func () bool {
	return v.Email != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "email", v.Email))
	}


	if !(func () bool {
		if v.Email == "" {
		return true
	}

	return validator.EmailRegex.MatchString(v.Email)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrEmail, "email", "email", v.Email))
	}


	if v.FavouriteColor != "" && !(func () bool {
		if v.FavouriteColor == "" {
		return true
	}

	return validator.HexcolorRegex.MatchString(v.FavouriteColor)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "hexcolor", "favourite_color", v.FavouriteColor))
	}


	if v.FavouriteColor != "" && !(func () bool {
		if v.FavouriteColor == "" {
		return true
	}

	return validator.RgbRegex.MatchString(v.FavouriteColor)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "rgb", "favourite_color", v.FavouriteColor))
	}


	if v.FavouriteColor != "" && !(func () bool {
		if v.FavouriteColor == "" {
		return true
	}

	return validator.RgbaRegex.MatchString(v.FavouriteColor)
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "rgba", "favourite_color", v.FavouriteColor))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}


func (v *Address) Validate() error {
	verr := make(validator.ValidationErrors, 0)


	if !(func () bool {
	return v.Street != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "street", v.Street))
	}


	if !(func () bool {
	return v.City != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "city", v.City))
	}


	if !(func () bool {
	return v.Planet != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "planet", v.Planet))
	}


	if !(func () bool {
	return v.Phone != ""
})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "required", "phone", v.Phone))
	}


	if len(verr) > 0 {
		return verr
	}
	return nil
}

