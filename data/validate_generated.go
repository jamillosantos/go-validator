// Code generated by validator-gen. DO NOT EDIT.
// See https://github.com/jamillosantos/go-validator for details.
package data

import (
	"github.com/jamillosantos/go-validator"
	"regexp"
)

func (v *User) Validate() error {
	verr := make(validator.ValidationErrors, 0)

	if (func() bool {
		return v.Age >= 0
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "age", v.Age))
	}

	if (func() bool {
		return v.Age <= 130
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "age", v.Age))
	}

	if !(func() bool {
		return v.Email != ""
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "email", v.Email))
	}

	if (func() bool {
		return validator.EmailRegex.MatchString(v.Email)
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "email", v.Email))
	}

	if (func() bool {
		return validator.HexcolorRegex.MatchString(v.FavouriteColor)
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "favourite_color", v.FavouriteColor))
	}

	if (func() bool {
		return validator.RgbRegex.MatchString(v.FavouriteColor)
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "favourite_color", v.FavouriteColor))
	}

	if (func() bool {
		return validator.RgbaRegex.MatchString(v.FavouriteColor)
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrIsDefault, "favourite_color", v.FavouriteColor))
	}

	if len(verr) > 0 {
		return verr
	}
	return nil
}

func (v *Address) Validate() error {
	verr := make(validator.ValidationErrors, 0)

	if !(func() bool {
		return v.Street != ""
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "street", v.Street))
	}

	if !(func() bool {
		return v.City != ""
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "city", v.City))
	}

	if !(func() bool {
		return v.Planet != ""
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "planet", v.Planet))
	}

	if !(func() bool {
		return v.Phone != ""
	})() {
		verr = append(verr, validator.NewFieldError(validator.ErrRequired, "phone", v.Phone))
	}

	if len(verr) > 0 {
		return verr
	}
	return nil
}
